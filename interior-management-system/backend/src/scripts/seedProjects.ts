import mongoose from 'mongoose';
import Project from '../models/Project.model';
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

const projects = [
  {
    name: 'Í∞ïÎÇ® ÏïÑÌååÌä∏',
    client: 'ÍπÄÏ≤†Ïàò',
    location: 'ÏÑúÏö∏ Í∞ïÎÇ®Íµ¨',
    status: 'in-progress',
    progress: 65,
    startDate: new Date('2025-01-01'),
    endDate: new Date('2025-03-31'),
    budget: 50000000,
    spent: 32500000,
    manager: 'ÏÉÅÏ§Ä',
    team: ['Ïã†Ïï†', 'Ïû¨Ï≤ú'],
    description: '30Ìèâ ÏïÑÌååÌä∏ Ï†ÑÏ≤¥ Î¶¨Î™®Îç∏ÎßÅ'
  },
  {
    name: 'ÏÑúÏ¥à Ïò§ÌîºÏä§',
    client: '„àúÌÖåÌÅ¨Ïª¥ÌçºÎãà',
    location: 'ÏÑúÏö∏ ÏÑúÏ¥àÍµ¨',
    status: 'in-progress',
    progress: 40,
    startDate: new Date('2025-01-15'),
    endDate: new Date('2025-04-15'),
    budget: 80000000,
    spent: 32000000,
    manager: 'ÎØºÍ∏∞',
    team: ['Ïû¨ÏÑ±', 'Ïû¨ÌòÑ'],
    description: 'Ïò§ÌîºÏä§ Ïù∏ÌÖåÎ¶¨Ïñ¥ Î∞è Í∞ÄÍµ¨ ÏÑ§Ïπò'
  },
  {
    name: 'ÌåêÍµê Ïπ¥Ìéò',
    client: 'Ïù¥ÏòÅÌù¨',
    location: 'Í≤ΩÍ∏∞ ÏÑ±ÎÇ®Ïãú',
    status: 'planning',
    progress: 10,
    startDate: new Date('2025-02-01'),
    endDate: new Date('2025-05-01'),
    budget: 35000000,
    spent: 3500000,
    manager: 'Ïû¨Ï≤ú',
    team: ['Ïã†Ïï†'],
    description: 'Ïπ¥Ìéò Ïã†Í∑ú Ïò§Ìîà Ïù∏ÌÖåÎ¶¨Ïñ¥'
  }
];

async function seedProjects() {
  try {
    // Connect to MongoDB
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      throw new Error('MONGODB_URI is not defined in environment variables');
    }

    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connected to MongoDB');

    // Clear existing projects
    await Project.deleteMany({});
    console.log('üóëÔ∏è  Cleared existing projects');

    // Insert new projects
    const insertedProjects = await Project.insertMany(projects);
    console.log(`‚úÖ Inserted ${insertedProjects.length} projects`);

    insertedProjects.forEach(project => {
      console.log(`   - ${project.name} (ID: ${project._id})`);
    });

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding projects:', error);
    process.exit(1);
  }
}

seedProjects();
