import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { X, Trash2 } from 'lucide-react';
import { format } from 'date-fns';
import { useDataStore } from '../store/dataStore';

interface ScheduleEvent {
  id?: string;
  title: string;
  start: Date;
  end: Date;
  projectId?: string;
  projectName?: string;
  assignedTo?: string[];
  attendees?: string[];
  description?: string;
  time?: string;
  originalTitle?: string;
  mergedEventIds?: string[];
  isASVisit?: boolean;
}

interface SlotInfo {
  start: Date;
  end: Date;
}

interface ScheduleFormData {
  projectId: string;
  title: string;
  date: string;
  description?: string;
}

interface ScheduleModalProps {
  event: ScheduleEvent | null;
  slotInfo: SlotInfo | null;
  defaultProjectName?: string;
  onClose: () => void;
  onSave: (event: ScheduleEvent) => void | Promise<void>;
  onDelete: (id: string) => void | Promise<void>;
}

const TEAM_MEMBERS = ['ÏÉÅÏ§Ä', 'Ïã†Ïï†', 'Ïû¨Ï≤ú', 'ÎØºÍ∏∞', 'Ïû¨ÏÑ±', 'Ïû¨ÌòÑ'];

const ScheduleModal = ({ event, slotInfo, defaultProjectName, onClose, onSave, onDelete }: ScheduleModalProps) => {
  // localStorageÏóêÏÑú ÎßàÏßÄÎßâ ÏÑ†ÌÉùÌïú ÌîÑÎ°úÏ†ùÌä∏ ID Í∞ÄÏ†∏Ïò§Í∏∞
  const getLastProjectId = () => {
    const lastProjectId = localStorage.getItem('lastSelectedProjectId');
    return lastProjectId || '';
  };

  const { register, handleSubmit, setValue, watch, formState: { errors }, reset } = useForm({
    defaultValues: {
      projectId: '', // ÎπàÏπ∏ÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú
      title: '',
      date: '',
      description: ''
    }
  });
  const { projects } = useDataStore();
  const [selectedMembers, setSelectedMembers] = useState<string[]>([]);
  const [customMember, setCustomMember] = useState('');
  const [hasTime, setHasTime] = useState<boolean>(false);
  const [timePeriod, setTimePeriod] = useState<'Ïò§Ï†Ñ' | 'Ïò§ÌõÑ'>('Ïò§Ï†Ñ');
  const [timeHour, setTimeHour] = useState<number>(9);
  const [timeMinute, setTimeMinute] = useState<number>(0);
  const [customProjectName, setCustomProjectName] = useState('');

  const selectedProjectId = watch('projectId');

  // Î™®Îã¨Ïù¥ Ï≤òÏùå ÎßàÏö¥Ìä∏Îê† Îïå Ìïú Î≤àÎßå Ï¥àÍ∏∞Ìôî (ÏãúÍ∞Ñ ÏÉÅÌÉúÎäî Ï†úÏô∏)
  useEffect(() => {
    // Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï (ÏãúÍ∞Ñ Í¥ÄÎ†® ÏÉÅÌÉúÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§Ï†ïÌï† ÎïåÍπåÏßÄ Ïú†ÏßÄ)
    setSelectedMembers([]);
    setCustomProjectName('');
    setCustomMember('');
  }, []); // Empty dependency array - only run once on mount

  // Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå Ï¥àÍ∏∞ ÏÑ§Ï†ï
  useEffect(() => {
    console.log('üü¢ ScheduleModal useEffect triggered:', {
      hasEvent: !!event,
      eventId: event?.id,
      hasSlotInfo: !!slotInfo,
      hasMergedEvents: !!(event?.mergedEventIds)
    });

    // eventÍ∞Ä ÏûàÏúºÎ©¥ Í∏∞Ï°¥ ÏùºÏ†ï ÏàòÏ†ï Î™®Îìú
    if (event && event.id) {
      console.log('üü¢ ScheduleModal processing event:', {
        title: event.title,
        projectId: event.projectId,
        projectName: event.projectName,
        start: event.start,
        assignedTo: event.assignedTo,
        time: event.time
      });

      // Ìèº ÌïÑÎìú ÏÑ§Ï†ï - originalTitleÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö© (ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏Í∞Ä Ï†úÍ±∞Îêú ÏõêÎ≥∏ Ï†úÎ™©)
      const titleToUse = event.originalTitle || event.title;
      // ÌòπÏãú titleÏóê ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎ©¥ Ï†úÍ±∞
      const timePattern = / - (Ïò§Ï†Ñ|Ïò§ÌõÑ) \d{1,2}Ïãú$/;
      const cleanTitle = titleToUse.replace(timePattern, '');

      setValue('title', cleanTitle, { shouldValidate: false, shouldDirty: false });
      setValue('date', format(event.start, 'yyyy-MM-dd'), { shouldValidate: false, shouldDirty: false });
      setValue('description', event.description || '', { shouldValidate: false, shouldDirty: false });

      // projectId ÏÑ§Ï†ï
      if (event.projectId && event.projectId !== '' && event.projectId !== 'undefined') {
        console.log('üîµ Setting projectId from event:', event.projectId);
        setValue('projectId', event.projectId, { shouldValidate: false, shouldDirty: false });
        setCustomProjectName(''); // Clear custom project name
      } else if (event.projectName) {
        // If no valid projectId but has projectName, try to find matching project
        const project = projects.find(p => p.name === event.projectName);
        console.log('üîµ Finding project by name:', event.projectName, 'found:', project);
        if (project) {
          console.log('üîµ Setting projectId from found project:', project.id);
          setValue('projectId', project.id, { shouldValidate: false, shouldDirty: false });
          setCustomProjectName(''); // Clear custom project name
        } else {
          // Project not found - leave empty
          console.log('üîµ Project not found, leaving empty');
          setValue('projectId', '', { shouldValidate: false, shouldDirty: false });
          setCustomProjectName('');
        }
      } else {
        // No projectId and no projectName - empty project (allowed)
        console.log('üîµ No project info, leaving empty');
        setValue('projectId', '', { shouldValidate: false, shouldDirty: false });
        setCustomProjectName('');
      }
      // assignedToÏôÄ attendees Îëò Îã§ ÌôïÏù∏
      const members = event.assignedTo || event.attendees || [];
      console.log('üü¢ Setting selectedMembers to:', members);
      setSelectedMembers(Array.isArray(members) ? members : []);

      // Check if event has time information
      if (event.time && event.time !== '-') {
        console.log('üü¢ Setting time from event:', {
          eventTime: event.time,
          parsedHours: event.time.split(':')[0],
          parsedMinutes: event.time.split(':')[1]
        });
        setHasTime(true);
        const [hoursStr, minutesStr] = event.time.split(':');
        const hours = parseInt(hoursStr, 10);
        const minutes = parseInt(minutesStr, 10);

        if (hours >= 12) {
          setTimePeriod('Ïò§ÌõÑ');
          setTimeHour(hours === 12 ? 12 : hours - 12);
        } else {
          setTimePeriod('Ïò§Ï†Ñ');
          setTimeHour(hours === 0 ? 12 : hours);
        }
        setTimeMinute(minutes);

        console.log('üü¢ Time state set:', {
          hasTime: true,
          period: hours >= 12 ? 'Ïò§ÌõÑ' : 'Ïò§Ï†Ñ',
          hour: hours >= 12 ? (hours === 12 ? 12 : hours - 12) : (hours === 0 ? 12 : hours),
          minute: minutes
        });
      } else {
        console.log('üü¢ No time in event, setting hasTime to false');
        setHasTime(false);
        // ÏãúÍ∞ÑÏù¥ ÏóÜÏùÑ Îïå Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        setTimePeriod('Ïò§Ï†Ñ');
        setTimeHour(9);
        setTimeMinute(0);
      }
    } else if (slotInfo && !event) {
      // ÏÉàÎ°úÏö¥ ÏùºÏ†ï Ï∂îÍ∞Ä Î™®Îìú (eventÍ∞Ä ÏóÜÍ≥† slotInfoÎßå ÏûàÏùÑ Îïå)
      console.log('üü¢ New schedule from slot:', slotInfo);

      // Ìèº Î¶¨ÏÖã (ÌîÑÎ°úÏ†ùÌä∏Îäî ÎπàÏπ∏ÏúºÎ°ú)
      reset({
        projectId: '',
        title: '',
        date: format(slotInfo.start, 'yyyy-MM-dd'),
        description: ''
      });

      setSelectedMembers([]);
      setCustomProjectName('');
      // ÏãúÍ∞Ñ ÏÉÅÌÉúÎäî Ï¥àÍ∏∞ÌôîÌïòÏßÄ ÏïäÏùå - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ§Ï†ïÌïú Í∞í Ïú†ÏßÄ

      // Set default project if provided
      if (defaultProjectName) {
        const defaultProject = projects.find(p => p.name === defaultProjectName);
        if (defaultProject) {
          setValue('projectId', defaultProject.id, { shouldValidate: false, shouldDirty: false });
        }
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [event?.id]); // Only re-run when event.id changes, NOT on slotInfo changes

  // ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù Ïãú ÏûêÎèôÏúºÎ°ú Ìï¥Îãπ ÌîÑÎ°úÏ†ùÌä∏Ïùò ÌåÄÏõêÏùÑ Îã¥ÎãπÏûêÎ°ú ÏÑ§Ï†ï
  // Ïù¥ Í∏∞Îä•ÏùÄ ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§ - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë Îã¥ÎãπÏûêÎ•º ÏÑ†ÌÉùÌïòÎèÑÎ°ù Ìï®
  // useEffect(() => {
  //   // ÏÉà ÏùºÏ†ï Ï∂îÍ∞Ä Î™®ÎìúÏù¥Í≥†, ÏÇ¨Ïö©ÏûêÍ∞Ä ÏïÑÏßÅ Îã¥ÎãπÏûêÎ•º ÏàòÎèôÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÏßÄ ÏïäÏïòÏùÑ ÎïåÎßå ÏûëÎèô
  //   if (!event?.id && !userModifiedMembers && selectedProjectId && selectedProjectId !== '') {
  //     const selectedProject = projects.find(p =>
  //       p.id === selectedProjectId ||
  //       p.id === parseInt(selectedProjectId) ||
  //       p.id.toString() === selectedProjectId.toString()
  //     );

  //     if (selectedProject && selectedProject.team && selectedProject.team.length > 0) {
  //       console.log('üîµ Auto-setting team members from project:', selectedProject.name, selectedProject.team);
  //       setSelectedMembers(selectedProject.team);
  //     }
  //   }
  // }, [selectedProjectId, projects, event?.id, userModifiedMembers]);

  const toggleMember = (member: string) => {
    console.log('üîµ toggleMember called with:', member);
    setSelectedMembers(prev => {
      const newMembers = prev.includes(member)
        ? prev.filter(m => m !== member)
        : [...prev, member];
      console.log('üîµ Updated members:', newMembers);
      return newMembers;
    });
  };

  // HV LAB ÌÜ†Í∏Ä Ìï®Ïàò (Îã®Ïùº Îã¥ÎãπÏûêÎ°ú Ï≤òÎ¶¨)
  const toggleHVLab = () => {
    const hvLabMember = 'HV LAB';
    if (selectedMembers.includes(hvLabMember)) {
      setSelectedMembers(prev => prev.filter(m => m !== hvLabMember));
    } else {
      setSelectedMembers(prev => [...prev, hvLabMember]);
    }
  };

  // ÌòÑÏû•ÌåÄ ÌÜ†Í∏Ä Ìï®Ïàò (Îã®Ïùº Î©§Î≤Ñ)
  const toggleFieldTeam = () => {
    const fieldTeamMember = 'ÌòÑÏû•ÌåÄ';
    if (selectedMembers.includes(fieldTeamMember)) {
      setSelectedMembers(prev => prev.filter(m => m !== fieldTeamMember));
    } else {
      setSelectedMembers(prev => [...prev, fieldTeamMember]);
    }
  };

  // ÎîîÏûêÏù∏ÌåÄ ÌÜ†Í∏Ä Ìï®Ïàò (Îã®Ïùº Îã¥ÎãπÏûêÎ°ú Ï≤òÎ¶¨)
  const toggleDesignTeam = () => {
    const designTeamMember = 'ÎîîÏûêÏù∏ÌåÄ';
    if (selectedMembers.includes(designTeamMember)) {
      setSelectedMembers(prev => prev.filter(m => m !== designTeamMember));
    } else {
      setSelectedMembers(prev => [...prev, designTeamMember]);
    }
  };

  const addCustomMember = () => {
    if (customMember.trim() && !selectedMembers.includes(customMember.trim())) {
      setSelectedMembers(prev => [...prev, customMember.trim()]);
      setCustomMember('');
    }
  };

  const removeMember = (member: string) => {
    setSelectedMembers(prev => prev.filter(m => m !== member));
  };

  const onSubmit = async (data: ScheduleFormData) => {
    console.log('üî¥ Form onSubmit called with data:', data);
    console.log('üî¥ selectedMembers:', selectedMembers);
    console.log('üî¥ hasTime state:', hasTime);
    console.log('üî¥ timePeriod:', timePeriod, 'timeHour:', timeHour, 'timeMinute:', timeMinute);
    console.log('üî¥ Available projects:', projects.map(p => ({ id: p.id, name: p.name, idType: typeof p.id })));
    console.log('üî¥ Merged event IDs:', event?.mergedEventIds);

    // Ï†úÎ™©ÏóêÏÑú ÏãúÍ∞Ñ ÌÖçÏä§Ìä∏ Ï†úÍ±∞ (ÌòπÏãú ÎÇ®ÏïÑÏûàÏùÑ Í≤ΩÏö∞Î•º ÎåÄÎπÑ)
    const timePattern = / - (Ïò§Ï†Ñ|Ïò§ÌõÑ) \d{1,2}Ïãú$/;
    const cleanedTitle = data.title.replace(timePattern, '').trim();

    let projectName = '';
    let projectId = '';

    if (data.projectId) {
      // Í∏∞Ï°¥ ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌïú Í≤ΩÏö∞
      // IDÎäî Î¨∏ÏûêÏó¥ ÎòêÎäî Ïà´ÏûêÏùº Ïàò ÏûàÏúºÎØÄÎ°ú Îëò Îã§ ÎπÑÍµê
      const selectedProject = projects.find(p =>
        p.id === data.projectId ||
        p.id === parseInt(data.projectId) ||
        p.id.toString() === data.projectId.toString()
      );
      console.log('üî¥ Looking for project with id:', data.projectId, 'type:', typeof data.projectId);
      console.log('üî¥ Found project:', selectedProject);
      projectName = selectedProject?.name || '';
      projectId = data.projectId;
    } else {
      // ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ (ÎπàÏπ∏)
      projectName = '';
      projectId = '';
    }

    console.log('üî¥ Final projectId:', projectId, 'projectName:', projectName, 'cleanedTitle:', cleanedTitle);

    const eventDate = new Date(data.date);

    // Calculate time - only include if time has been set
    let timeString = '-'; // Default value when no time is set
    if (hasTime) {
      let hours24 = timeHour;
      if (timePeriod === 'Ïò§ÌõÑ' && timeHour !== 12) {
        hours24 = timeHour + 12;
      } else if (timePeriod === 'Ïò§Ï†Ñ' && timeHour === 12) {
        hours24 = 0;
      }
      timeString = `${hours24.toString().padStart(2, '0')}:${timeMinute.toString().padStart(2, '0')}`;
      console.log('üî¥ Time calculated:', timeString);
    } else {
      console.log('üî¥ No time set (hasTime is false)');
    }

    // Î≥ëÌï©Îêú Ïù¥Î≤§Ìä∏ÎÇò Îã®Ïùº Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
    const newEvent: ScheduleEvent = {
      ...event,
      title: cleanedTitle,  // Ï†ïÎ¶¨Îêú Ï†úÎ™© ÏÇ¨Ïö©
      start: eventDate,
      end: eventDate,
      projectId: projectId,
      projectName: projectName,
      assignedTo: selectedMembers,
      description: data.description || '',
      time: timeString,
      mergedEventIds: event?.mergedEventIds // Î≥ëÌï©Îêú IDÎì§ Ïú†ÏßÄ
    };

    console.log('üî¥ Calling onSave with newEvent:', newEvent);
    try {
      await onSave(newEvent);
      console.log('üî¥ onSave completed successfully');
    } catch (error) {
      console.error('üî¥ onSave failed:', error);
      throw error;
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-3 md:p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-4 md:p-6 border-b">
          <h2 className="text-lg md:text-xl font-semibold">
            {event ? 'ÏùºÏ†ï ÏàòÏ†ï' : 'ÏÉà ÏùºÏ†ï Ï∂îÍ∞Ä'}
          </h2>
          <button
            onClick={onClose}
            className="p-1.5 md:p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit(onSubmit)} className="p-4 md:p-6 space-y-3 md:space-y-4">
          {/* Project */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ÌîÑÎ°úÏ†ùÌä∏
            </label>
            <select
              {...register('projectId')}
              className="input w-full"
            >
              <option value=""></option>
              {projects
                .filter(project => {
                  // AS ÏùºÏ†ïÏù∏ Í≤ΩÏö∞ Î™®Îì† ÌîÑÎ°úÏ†ùÌä∏ ÌëúÏãú, ÏïÑÎãàÎ©¥ ÏßÑÌñâÏ§ëÏù∏ ÌîÑÎ°úÏ†ùÌä∏Îßå
                  if (event?.isASVisit) {
                    return true;
                  }
                  return project.status !== 'completed';
                })
                .map((project) => (
                  <option key={project.id} value={project.id}>
                    {project.name}
                  </option>
                ))}
            </select>
          </div>

          {/* Title */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ÏùºÏ†ï Ï†úÎ™© *
            </label>
            <input
              {...register('title', { required: 'Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî' })}
              type="text"
              className="input w-full"
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{String(errors.title.message)}</p>
            )}
          </div>

          {/* Date */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ÎÇ†Ïßú *
            </label>
            <input
              {...register('date', { required: 'ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî' })}
              type="date"
              className="input w-full"
            />
            {errors.date && (
              <p className="mt-1 text-sm text-red-600">{String(errors.date.message)}</p>
            )}
          </div>

          {/* Time */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ÏãúÍ∞Ñ
            </label>

            {/* Time Toggle */}
            <div className="mb-2">
              <button
                type="button"
                onClick={() => setHasTime(!hasTime)}
                className={`px-3 py-1.5 text-xs rounded border transition-colors ${
                  hasTime
                    ? 'bg-gray-900 text-white border-gray-900'
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                {hasTime ? 'ÏãúÍ∞Ñ ÏÑ§Ï†ïÎê®' : 'ÏãúÍ∞Ñ ÎØ∏ÏÑ§Ï†ï (-)'}
              </button>
            </div>

            {/* Time Selectors - Only show when hasTime is true */}
            {hasTime && (
              <div className="flex flex-wrap items-center gap-2">
                {/* AM/PM Selection */}
                <div className="flex gap-1">
                  <button
                    type="button"
                    onClick={() => setTimePeriod('Ïò§Ï†Ñ')}
                    className={`px-3 py-1.5 text-xs rounded border transition-colors ${
                      timePeriod === 'Ïò§Ï†Ñ'
                        ? 'bg-gray-900 text-white border-gray-900'
                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    Ïò§Ï†Ñ
                  </button>
                  <button
                    type="button"
                    onClick={() => setTimePeriod('Ïò§ÌõÑ')}
                    className={`px-3 py-1.5 text-xs rounded border transition-colors ${
                      timePeriod === 'Ïò§ÌõÑ'
                        ? 'bg-gray-900 text-white border-gray-900'
                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    Ïò§ÌõÑ
                  </button>
                </div>

                {/* Hour Selection */}
                <select
                  value={timeHour}
                  onChange={(e) => setTimeHour(parseInt(e.target.value))}
                  className="flex-1 min-w-[80px] max-w-[120px] px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-gray-500"
                >
                  {[12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((hour) => (
                    <option key={hour} value={hour}>
                      {hour}Ïãú
                    </option>
                  ))}
                </select>

                {/* Minute Selection (10Î∂Ñ Îã®ÏúÑ) */}
                <select
                  value={timeMinute}
                  onChange={(e) => setTimeMinute(parseInt(e.target.value))}
                  className="flex-1 min-w-[80px] max-w-[120px] px-2 py-1.5 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-gray-500"
                >
                  {[0, 10, 20, 30, 40, 50].map((minute) => (
                    <option key={minute} value={minute}>
                      {minute}Î∂Ñ
                    </option>
                  ))}
                </select>
              </div>
            )}
          </div>

          {/* Assigned Members */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Îã¥ÎãπÏûê (Ï§ëÎ≥µ ÏÑ†ÌÉù Í∞ÄÎä•)
            </label>

            {/* Í∏∞Î≥∏ ÌåÄÏõê Î≤ÑÌäº Î∞è ÏÑ†ÌÉùÎêú Ïª§Ïä§ÌÖÄ Î©§Î≤Ñ */}
            <div className="flex flex-wrap gap-1.5 mb-2">
              {/* HV LAB Î≤ÑÌäº (Ï†ÑÏ≤¥ ÌåÄÏõê) */}
              <button
                type="button"
                onClick={toggleHVLab}
                className={`px-2.5 py-1.5 rounded border transition-colors text-sm ${
                  selectedMembers.includes('HV LAB')
                    ? 'bg-gray-900 text-white border-gray-900'
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                HV LAB
              </button>

              {/* ÌòÑÏû•ÌåÄ Î≤ÑÌäº */}
              <button
                type="button"
                onClick={toggleFieldTeam}
                className={`px-2.5 py-1.5 rounded border transition-colors text-sm ${
                  selectedMembers.includes('ÌòÑÏû•ÌåÄ')
                    ? 'bg-gray-900 text-white border-gray-900'
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                ÌòÑÏû•ÌåÄ
              </button>

              {/* ÎîîÏûêÏù∏ÌåÄ Î≤ÑÌäº */}
              <button
                type="button"
                onClick={toggleDesignTeam}
                className={`px-2.5 py-1.5 rounded border transition-colors text-sm ${
                  selectedMembers.includes('ÎîîÏûêÏù∏ÌåÄ')
                    ? 'bg-gray-900 text-white border-gray-900'
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                ÎîîÏûêÏù∏ÌåÄ
              </button>

              {/* Í∏∞Î≥∏ ÌåÄÏõê Î≤ÑÌäº */}
              {TEAM_MEMBERS.map((member) => (
                <button
                  key={member}
                  type="button"
                  onClick={() => toggleMember(member)}
                  className={`px-2.5 py-1.5 rounded border transition-colors text-sm ${
                    selectedMembers.includes(member)
                      ? 'bg-gray-900 text-white border-gray-900'
                      : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  {member}
                </button>
              ))}

              {/* Ïª§Ïä§ÌÖÄ Î©§Î≤Ñ Î≤ÑÌäº (Í∏∞Î≥∏ ÌåÄÏõêÏù¥ ÏïÑÎãå ÏÑ†ÌÉùÎêú Î©§Î≤ÑÎì§, ÌåÄ Ïù¥Î¶Ñ Ï†úÏô∏) */}
              {selectedMembers
                .filter(member => !TEAM_MEMBERS.includes(member) && member !== 'HV LAB' && member !== 'ÌòÑÏû•ÌåÄ' && member !== 'ÎîîÏûêÏù∏ÌåÄ')
                .map((member) => (
                  <button
                    key={member}
                    type="button"
                    onClick={() => removeMember(member)}
                    className="px-2.5 py-1.5 rounded border transition-colors text-sm bg-gray-900 text-white border-gray-900 hover:bg-gray-800"
                  >
                    {member} √ó
                  </button>
                ))
              }
            </div>

            {/* ÏßÅÏ†ë ÏûÖÎ†• */}
            <div className="flex gap-2">
              <input
                type="text"
                value={customMember}
                onChange={(e) => setCustomMember(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    addCustomMember();
                  }
                }}
                className="flex-1 px-3 py-1.5 border border-gray-300 rounded-lg text-xs focus:outline-none focus:ring-2 focus:ring-gray-500"
              />
              <button
                type="button"
                onClick={addCustomMember}
                className="px-3 py-1.5 bg-gray-100 text-gray-700 rounded-lg text-xs font-medium hover:bg-gray-200 transition-colors"
              >
                Ï∂îÍ∞Ä
              </button>
            </div>
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ÏÑ§Î™Ö
            </label>
            <textarea
              {...register('description')}
              rows={4}
              className="input w-full text-sm md:text-base"
            />
          </div>

          {/* Actions */}
          <div className="flex flex-col sm:flex-row sm:justify-between gap-2 sm:gap-0 pt-4 border-t">
            <div>
              {event && (
                <button
                  type="button"
                  onClick={() => {
                    if (window.confirm('Ïù¥ ÏùºÏ†ïÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                      onDelete(event.id);
                    }
                  }}
                  className="btn btn-outline text-red-600 hover:bg-red-50 flex items-center w-full sm:w-auto justify-center text-sm md:text-base"
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  ÏÇ≠Ï†ú
                </button>
              )}
            </div>
            <div className="flex gap-2 sm:space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="btn btn-outline flex-1 sm:flex-none text-sm md:text-base"
              >
                Ï∑®ÏÜå
              </button>
              <button type="submit" className="btn btn-primary flex-1 sm:flex-none text-sm md:text-base">
                {event ? 'ÏàòÏ†ï' : 'Ï∂îÍ∞Ä'}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ScheduleModal;